{"version":3,"sources":["Box.js","NewBoxForm.js","BoxList.js","App.js","serviceWorker.js","index.js"],"names":["Box","props","handleClick","bind","this","deleteBox","id","className","style","height","width","backgroundColor","color","onClick","Component","NewBoxForm","state","handleChange","handleSubmit","event","preventDefault","newBox","uuidv4","createBox","setState","target","name","value","onSubmit","htmlFor","type","onChange","BoxList","boxes","create","delete","filter","box","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.54302bb6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Box.css';\n\nclass Box extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.props.deleteBox(this.props.id);\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"Box\"\n          style={{\n            height: `${this.props.height}px`,\n            width: `${this.props.width}px`,\n            backgroundColor: this.props.color\n          }}\n        >\n          <button className=\"Box-btn\" onClick={this.handleClick}>X</button>\n        </div>\n        \n      </div>\n    );\n  }\n}\n\nexport default Box;","import React, { Component } from \"react\";\nimport './NewBoxForm.css';\nimport { v4 as uuidv4 } from 'uuid';\n\nclass NewBoxForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {height: \"\", width: \"\", color: \"\"};\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    let newBox = {...this.state, id: uuidv4()}\n    this.props.createBox(newBox);\n    this.setState({\n      height: \"\",\n      width:\"\",\n      color:\"\"\n    });\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  render() {\n    return (\n      <form className=\"NewBoxForm\" onSubmit={this.handleSubmit}>\n        <div className=\"input-container\">\n          <label htmlFor=\"height\">Height:</label>\n          <input \n            className=\"NewBoxForm-input\"\n            type=\"text\" \n            name=\"height\"\n            value={this.state.height}\n            id=\"height\"\n            onChange={this.handleChange}\n          /><span>px</span>\n        </div>\n        <div className=\"input-container\">\n          <label htmlFor=\"width\">Width:</label>\n          <input \n            className=\"NewBoxForm-input\"\n            type=\"text\" \n            name=\"width\"\n            value={this.state.width}\n            id=\"width\"\n            onChange={this.handleChange}\n          /><span>px</span>\n        </div>\n        <div className=\"input-container\">\n          <label htmlFor=\"color\">Color:</label>\n          <input \n            className=\"NewBoxForm-input\"\n            type=\"text\" \n            name=\"color\"\n            value={this.state.color}\n            id=\"color\"\n            onChange={this.handleChange}\n          />\n        </div>\n        <button>Create Box</button>\n      </form>\n    )\n  }\n}\n\nexport default NewBoxForm;","import React, { Component } from \"react\";\nimport Box from \"./Box\";\nimport NewBoxForm from \"./NewBoxForm\";\nimport './BoxList.css';\n\nclass BoxList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { boxes: []};\n    this.create = this.create.bind(this);\n    this.delete = this.delete.bind(this);\n  }\n\n  create(newBox) {\n    this.setState({\n      boxes: [...this.state.boxes, newBox]\n    });\n  }\n\n  delete(id) {\n    this.setState({\n      boxes: this.state.boxes.filter(box => box.id !== id)\n    });\n  }\n\n  render(){\n    const boxes = this.state.boxes.map(box => (\n      <Box \n      height={box.height} \n      width={box.width} \n      color={box.color}\n      key={box.id}\n      id={box.id}\n      deleteBox={this.delete}\n      />\n    ));\n\n    return(\n      <div>\n        <h2 className=\"BoxList-title\">Color Box Maker</h2>\n        <NewBoxForm createBox={this.create} />\n        <div className=\"BoxList-container\">\n          {boxes}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default BoxList;","import React from 'react';\nimport './App.css';\nimport BoxList from \"./BoxList\";\n\nfunction App() {\n  return (\n    <div>\n      <BoxList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}